СПИСОК ЗАДАЧ ПО РЕАЛИЗАЦИЯ ГРАФИКА СГОРАНИЯ ЗАДАЧ
Создание базы данных (PostgreSQL). 
Развертывание СУБД PostgreSQL. (0,5)
Создание пользователя для БД графика сгорания задач. (0,1)
Разработка SQL скрипта для определения структуры БД. Скрипт должен определять таблицы, их столбы, первичные ключи, ограничения и комментарии столбцов. (3)
Разработка SQL скрипта для заполнения БД тестовыми данными. (2)
Поднять БД. (2)
Реализация backend приложения (Golang). 
Реализация каркаса приложения. (4)
Определение пустых структур backend, включая сигнатуры методов и пакетных функций.
Определение интерфейса taskReader.
Реализация пакета types. (2)
Реализация заглушек уровня взаимодействия с источниками. (2)
Реализация заглушки WebServiceTasks.
Реализация заглушки FileTasks.
Реализация заглушки DBTasks.
Реализация заглушек уровня взаимодействия с БД. (2)
Реализация заглушки DBProject.
Реализация заглушки DBDeveloper.
Реализация чтения конфигурации приложения.
Создание файла конфигурации conf.ini в директории conf. Реализация структуры Config. (2)
Реализация функции Load(). Функция зачитывает файл conf.ini по заданном пути, и парсит его содержимое в структуру Config. Структура Config сохраняется в пакетную перемененную conf (синглтон). (3)
Реализация функции Read(). Функция возвращает структуру Config из пакетной переменной conf. (1)
Реализация старта приложения. 
Реализация функции парсинга флагов приложения. Приложение при старте получает один флаг - conf (путь к файлу конфигурации). (1)
Реализация main(). Выполняется парсинг флагов приложения, чтение конфигурации через вызов config.Load(), и стартует http-сервер приложения.(1)
Реализация обработчика запроса index.html (/).(0)
Реализация обработчика запросов статики (/static).(0)
Реализация обработчика запросов построения графика (/burndownchart?dev_login=:dev_login). (1)
Реализация объекта Provider.
Определение структуры Provider. (0)
Реализация фабрики taskReaderFactory.
Реализация функции-конструктора фабрики factory(). Функция принимает Config параметром, и запоминает его.(1)
Реализация фабричного метода Make(). Метод на основе данных Project определяет, какой объект, FIleTasks, WebServiceTasks или DBTasks, необходимо инициализировать. Созданный объект возвращается под интерфейсом taskReader.(2)
Реализация функции-конструктора New. В функцию передаётся Config. Функция возвращает указатель на Provider.(1)
Реализация метода MakeBurndownChart(). Метод вызывает чтение пользователя по логину, затем определяет группу пользователя, затем зачитывает список задач проекта через интерфейс taskReader (который получает через фабрику), и вычисляет сумму стоимостей задач. Затем зачитываются все разработчики из группы, и определяется максимальная стоимость задач ежедневно, начиная с SprintStartDate. Метод инициализирует на основе полученных данных структуру BurndownChart, и возвращает её.(8)
Полноценная реализация уровней взаимодействия с задачами и базами данных.
Реализация WebServiceTasks. Объект получает список задач из стороннего сервиса через HTTP вызов (get http://host:port/tasks?project_id=:project_id)(1)
Реализация FileTasks. Объект получает список задач из файла, заданного в структуре Project.(2)
Реализация DBTasks. Объект получает список задач из БД.(3)
Реализация DBProject. Объект предоставляет доступ к таблице t_project БД.(2)
Реализация DBDeveloper. Объект предоставляет доступ к таблице t_developer БД.(2)
Реализация frontend приложения (TypeScript, chart.js, Webpack).
